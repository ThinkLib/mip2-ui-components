{"version":3,"sources":["../../../src/components/VParallax/VParallax.ts"],"names":[],"mappings":";AACA,OAAO,+CAAP;AAEA;AACA,OAAO,YAAP,MAAyB,2BAAzB;AAKA,OAAO,MAAP,MAAmC,mBAAnC;AAQA;AACA,eAAe,OAAkD,YAAlD,EAAgE,MAAhE,CAAuE;AACpF,UAAM,YAD8E;AAGpF,WAAO;AACL,aAAK,MADA;AAEL,gBAAQ;AACN,kBAAM,CAAC,MAAD,EAAS,MAAT,CADA;AAEN,qBAAS;AAFH,SAFH;AAML,aAAK;AANA,KAH6E;AAYpF,UAAM,OAAO;AACX,kBAAU;AADC,KAAP,CAZ8E;AAgBpF,cAAU;AACR,iBAAM;AACJ,mBAAO;AACL,yBAAS,OADJ;AAEL,yBAAS,KAAK,QAAL,GAAgB,CAAhB,GAAoB,CAFxB;AAGL,2BAAW,mBAAmB,KAAK,QAAQ;AAHtC,aAAP;AAKD;AAPO,KAhB0E;AA0BpF,WAAO;AACL,mBAAQ;AACN,iBAAK,QAAL,GAAgB,IAAhB;AACD;AAHI,KA1B6E;AAgCpF,cAAO;AACL,aAAK,IAAL;AACD,KAlCmF;AAoCpF,aAAS;AACP,eAAI;AACF,kBAAM,MAAM,KAAK,KAAL,CAAW,GAAvB;AAEA,gBAAI,CAAC,GAAL,EAAU;AAEV,gBAAI,IAAI,QAAR,EAAkB;AAChB,qBAAK,SAAL;AACA,qBAAK,SAAL;AACD,aAHD,MAGO;AACL,oBAAI,gBAAJ,CAAqB,MAArB,EAA6B,MAAK;AAChC,yBAAK,SAAL;AACA,yBAAK,SAAL;AACD,iBAHD,EAGG,KAHH;AAID;AACF,SAfM;AAgBP,oBAAS;AACP,mBAAO,KAAK,KAAL,CAAW,GAAX,CAAe,aAAtB;AACD;AAlBM,KApC2E;AAyDpF,WAAQ,CAAR,EAAS;AACP,cAAM,UAAqB;AACzB,yBAAa,mBADY;AAEzB,mBAAO,KAAK,MAFa;AAGzB,mBAAO;AACL,qBAAK,KAAK;AADL,aAHkB;AAMzB,iBAAK;AANoB,SAA3B;AASA,YAAI,KAAK,GAAT,EAAc,QAAQ,KAAR,CAAe,GAAf,GAAqB,KAAK,GAA1B;AAEd,cAAM,YAAY,EAAE,KAAF,EAAS;AACzB,yBAAa;AADY,SAAT,EAEf,CACD,EAAE,KAAF,EAAS,OAAT,CADC,CAFe,CAAlB;AAMA,cAAM,UAAU,EAAE,KAAF,EAAS;AACvB,yBAAa;AADU,SAAT,EAEb,KAAK,MAAL,CAAY,OAFC,CAAhB;AAIA,eAAO,EAAE,KAAF,EAAS;AACd,yBAAa,YADC;AAEd,mBAAO;AACL,wBAAQ,GAAG,KAAK,MAAM;AADjB,aAFO;AAKd,gBAAI,KAAK;AALK,SAAT,EAMJ,CAAC,SAAD,EAAY,OAAZ,CANI,CAAP;AAOD;AAtFmF,CAAvE,CAAf","sourcesContent":["// Style\nimport '../../stylus/components/_parallax.styl'\n\n// Mixins\nimport Translatable from '../../mixins/translatable'\n\n// Types\nimport Vue from 'vue'\nimport { VNode, VNodeData } from 'vue/types/vnode'\nimport mixins, { ExtractVue } from '../../util/mixins'\n\ninterface options extends Vue {\n  $refs: {\n    img: HTMLImageElement\n  }\n}\n\n/* @vue/component */\nexport default mixins<options & ExtractVue<typeof Translatable>>(Translatable).extend({\n  name: 'v-parallax',\n\n  props: {\n    alt: String,\n    height: {\n      type: [String, Number],\n      default: 500\n    },\n    src: String\n  },\n\n  data: () => ({\n    isBooted: false\n  }),\n\n  computed: {\n    styles (): object {\n      return {\n        display: 'block',\n        opacity: this.isBooted ? 1 : 0,\n        transform: `translate(-50%, ${this.parallax}px)`\n      }\n    }\n  },\n\n  watch: {\n    parallax () {\n      this.isBooted = true\n    }\n  },\n\n  mounted () {\n    this.init()\n  },\n\n  methods: {\n    init () {\n      const img = this.$refs.img\n\n      if (!img) return\n\n      if (img.complete) {\n        this.translate()\n        this.listeners()\n      } else {\n        img.addEventListener('load', () => {\n          this.translate()\n          this.listeners()\n        }, false)\n      }\n    },\n    objHeight () {\n      return this.$refs.img.naturalHeight\n    }\n  },\n\n  render (h): VNode {\n    const imgData: VNodeData = {\n      staticClass: 'v-parallax__image',\n      style: this.styles,\n      attrs: {\n        src: this.src\n      },\n      ref: 'img'\n    }\n\n    if (this.alt) imgData.attrs!.alt = this.alt\n\n    const container = h('div', {\n      staticClass: 'v-parallax__image-container'\n    }, [\n      h('img', imgData)\n    ])\n\n    const content = h('div', {\n      staticClass: 'v-parallax__content'\n    }, this.$slots.default)\n\n    return h('div', {\n      staticClass: 'v-parallax',\n      style: {\n        height: `${this.height}px`\n      },\n      on: this.$listeners\n    }, [container, content])\n  }\n})\n"],"sourceRoot":""}