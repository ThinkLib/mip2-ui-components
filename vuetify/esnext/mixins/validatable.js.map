{"version":3,"sources":["../../src/mixins/validatable.js"],"names":[],"mappings":"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","sourcesContent":["import { deepEqual } from '../util/helpers'\nimport { inject as RegistrableInject } from './registrable'\nimport { consoleError } from '../util/console'\n\n// Mixins\nimport Colorable from './colorable'\n\n/* @vue/component */\nexport default {\n  name: 'validatable',\n\n  mixins: [\n    Colorable,\n    RegistrableInject('form')\n  ],\n\n  props: {\n    error: Boolean,\n    errorCount: {\n      type: [Number, String],\n      default: 1\n    },\n    errorMessages: {\n      type: [String, Array],\n      default: () => []\n    },\n    messages: {\n      type: [String, Array],\n      default: () => []\n    },\n    rules: {\n      type: Array,\n      default: () => []\n    },\n    success: Boolean,\n    successMessages: {\n      type: [String, Array],\n      default: () => []\n    },\n    validateOnBlur: Boolean\n  },\n\n  data: () => ({\n    errorBucket: [],\n    hasColor: false,\n    hasFocused: false,\n    hasInput: false,\n    isResetting: false,\n    valid: false\n  }),\n\n  computed: {\n    hasError () {\n      return this.internalErrorMessages.length > 0 ||\n        this.errorBucket.length > 0 ||\n        this.error\n    },\n    externalError () {\n      return this.internalErrorMessages.length > 0 || this.error\n    },\n    // TODO: Add logic that allows the user to enable based\n    // upon a good validation\n    hasSuccess () {\n      return this.successMessages.length > 0 ||\n        this.success\n    },\n    hasMessages () {\n      return this.validations.length > 0\n    },\n    hasState () {\n      return this.shouldValidate && (this.hasError || this.hasSuccess)\n    },\n    internalErrorMessages () {\n      return this.errorMessages || ''\n    },\n    shouldValidate () {\n      return this.externalError || (!this.isResetting && (\n        this.validateOnBlur\n          ? this.hasFocused && !this.isFocused\n          : (this.hasInput || this.hasFocused)\n      ))\n    },\n    validations () {\n      return this.validationTarget.slice(0, this.errorCount)\n    },\n    validationState () {\n      if (this.hasError && this.shouldValidate) return 'error'\n      if (this.hasSuccess && this.shouldValidate) return 'success'\n      if (this.hasColor) return this.color\n      return null\n    },\n    validationTarget () {\n      const target = this.internalErrorMessages.length > 0\n        ? this.errorMessages\n        : this.successMessages.length > 0\n          ? this.successMessages\n          : this.messages\n\n      // String\n      if (!Array.isArray(target)) {\n        return [target]\n      // Array with items\n      } else if (target.length > 0) {\n        return target\n      // Currently has validation\n      } else if (this.shouldValidate) {\n        return this.errorBucket\n      } else {\n        return []\n      }\n    }\n  },\n\n  watch: {\n    rules: {\n      handler (newVal, oldVal) {\n        if (deepEqual(newVal, oldVal)) return\n        this.validate()\n      },\n      deep: true\n    },\n    internalValue () {\n      // If it's the first time we're setting input,\n      // mark it with hasInput\n      this.hasInput = true\n      this.validateOnBlur || this.$nextTick(this.validate)\n    },\n    isFocused (val) {\n      if (!val) {\n        this.hasFocused = true\n        this.validateOnBlur && this.validate()\n      }\n    },\n    isResetting () {\n      setTimeout(() => {\n        this.hasInput = false\n        this.hasFocused = false\n        this.isResetting = false\n      }, 0)\n    },\n    hasError (val) {\n      if (this.shouldValidate) {\n        this.$emit('update:error', val)\n      }\n    }\n  },\n\n  beforeMount () {\n    this.validate()\n  },\n\n  created () {\n    this.form && this.form.register(this)\n  },\n\n  beforeDestroy () {\n    this.form && this.form.unregister(this)\n  },\n\n  methods: {\n    reset () {\n      this.isResetting = true\n      this.internalValue = Array.isArray(this.internalValue)\n        ? []\n        : undefined\n    },\n    validate (force = false, value = this.internalValue) {\n      const errorBucket = []\n\n      if (force) this.hasInput = this.hasFocused = true\n\n      for (let index = 0; index < this.rules.length; index++) {\n        const rule = this.rules[index]\n        const valid = typeof rule === 'function' ? rule(value) : rule\n\n        if (valid === false || typeof valid === 'string') {\n          errorBucket.push(valid)\n        } else if (valid !== true) {\n          consoleError(`Rules should return a string or boolean, received '${typeof valid}' instead`, this)\n        }\n      }\n\n      this.errorBucket = errorBucket\n      this.valid = errorBucket.length === 0\n\n      return this.valid\n    }\n  }\n}\n"],"sourceRoot":""}